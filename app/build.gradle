apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "uk.co.massimocarli.lifecyclecomponenttest"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        exclude 'META-INF/*'
        exclude 'META-INF/proguard/androidx-annotations.pro'

    }
    // We use this in case we have 1.8
    /*
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    */
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"


    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.0.0'


    testImplementation 'junit:junit:4.12'

    androidTestImplementation "androidx.test.ext:junit:1.1.0"
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'


    def lifecycle_version = "2.0.0"
    // Case we don't use Java 1.8
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"

    // Case with Java 1.8
    //implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // If we want extensions like the LifecycleService class
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"

}
